10 rem Othello     Author: Richard O. Duda - Byte Oct. 77
20 rem Plays the game "othello" with two strategies:
30 rem   1.  Take the maximum number of pieces
40 rem   2.  Add a bonus for outside position 
50 rem Board is the array A, bounded by 0's (blanks)
60 rem   A = 0 for empty square
70 rem   A = B for black square -- X (internally -1)
80 rem   A = W for white square -- O (internally +1)
90 rem   I and J always used for row/column indices
100 rem  I4 and J4 store increments to the 8 neighbors
110 rem  c$ and d$ store characters A-N, X, .,0 for output
120 dim A(9,9)
121 dim I4(8)
122 dim J4(8)
123 dim C$(8) 124
dim D$(3)
130 rem  Initial Greeting
140 print "Greetings from Othello"
150 print "Do you want instructions (Y or N) "; 160 input x$ 170 if x$ = "N" then goto 390 180 if x$ <> "Y" then goto 160 190 print 200 print "Othello is played on an 8 x 8 checker board," 210 print "rows are numbered 1 to 8 and columns A to H." 220 print "The initial configuration is all blank, except" 230 print "for the center four squares.  Which form the" 240 print "pattern" 250 print "            O X" 260 print "            X O" 270 print 280 print "Try to place your piece so that it 'outflanks'" 290 print "mine, creating a horizontal, vertical or" 300 print "diagonal run of my pieces bounded at each end" 310 print "by at least one of yours.  This will 'flip' my" 320 print "pieces, turning them into yours." 330 print "Note: You must capture at least one of my" 340 print "pieces in this way if it is at all possible." 350 print "if it is not possible, you forfeit your turn by" 360 print "entering 0,0 for your (row, col) move." 370 print 380 rem Initialize 390 print "Should I wait before making my moves (Y or N) "; 400 let F2 = 0 410 input x$ 420 if x$ = "N" then goto 460 430 if x$ <> "Y" then goto 410 440 P2 = 1 450 print "OK.  Typing any character will let me go." 460 print "Should I play my best strategy (Y or N) "; 470 S2 = 0 480 input x$ 490 if x$ = "N" then goto 520 500 if x$ <> "Y" then goto 480 510 S2 = 2 520 B = -1 530 W = 1 535 rem  Index starts at 1 not 0, changes next 3 lines. 540 D$(B + 2) = "X" 550 D$(0 + 2) = "." 560 D$(W + 2) = "O" 570 for K = 1 to 8 580    read I4(K) 590 next K 600 DATA 0,-1,-1,-1,0,1,1,1 610 for K = 1 to 8 620    read J4(K) 630 next k 640 DATA 1,1,0,-1,-1,-1,0,1 650 for K = 1 to 8 660    read C$(K) 670 next K 680 data "A","B","C","D","E","F","G","H" 690 rem Set up a new game
700 for i = 0 to 9 710    for j = 0 to 9 720       A(i,j) = 0 730    next j 740 next i 750 A(4,4) = W 760 A(5,5) = W 770 A(4,5) = B 780 A(5,4) = B 790 C1 = 2 800 H1 = 2 810 N1 = 4 820 Z = 0 830 rem Human's Choices 840 print "Do you want to have X or O "; 850 C = W 860 H = B 870 input x$ 880 if x$ = "X" then goto 920 890 if x$ <> "O" then goto 870 900 C = B 910 H = W 920 print "Do you want go to first (Y or N) "; 930 input x$ 940 if x$ = "N" then goto 1020 950 if x$ <> "Y" then goto 930 960 rem Print initial board 970 gosub 3100 980 goto 1690 990 rem Computer's move 1000 if F2 = 0 then goto 1020 1010 input x$ 1020 B1 = -1 1030 I3 = J3 = 0 1040 T1 = C 1050 T2 = H 1060 rem Scan for blank square 1070 for I = 1 to 8 1080    for J = 1 to 8 1090       if A(I,J) <> 0 then goto 1380 1100       rem found a blank square 1110       rem Does it have an opponent as a neighbor? 1120       gosub 2620 1130       if F1 = 0 then goto 1380 1140       rem Found an opponent as a neighbor 1150       rem How many of his pieces can we flip? 1160       rem (Don't do it now) 1170       U = -1 1180       gosub 2820 1190       rem Extra points for boundary position 1200       if S1 = 0 then goto 1380 1210       if (I - 1) * (I - 8) <> 0 then goto 1230 1220       S1 = S1 + S2 1230       if (J - 1) * (J - 8) <> 0 then goto 1260 1240       S1 = S1 + S2 1250       rem Is this better than the best found so far?1260       if S1 < B1 then goto 1380 1270       if S1 > B1 then goto 1340 1280       rem A Tie: Random Decision 1290       rem The next two executable statements can be deleted
1300       rem for a version of BASIC without random numbers 
1410       R = RND
1320       if R > 0.5 then goto 1380
1330       rem Yes
1340       B1 = S1
1350       I3 = I 1360       J3 = J 1370       rem end of scan loop 1380    next J 1390 next I 1400 rem Could we do anything? 1410 if B1 > 0 then goto 1480 1420 rem NC 1430 print "I have to forfeit my move" 1440 if Z = 1 then goto 2190 1450 Z = 1 1460 goto 1690 1470 rem Make the Move 1480 Z = 0 1490 print "I will move to "; 1500 print I3; 1510 print " "; 1520 print C$(J3) 1530 I = I3 1540 J = J3 1550 U = 1 1560 gosub 2820 1570 C1 = C1 + S1 + 1 1580 H1 = H1 - S1 1590 N1 = N1 + 1 1600 print "That gives me "; 1610 print S1; 1620 print " of your pieces" 1630 rem print out board 1640 gosub 3100 1650 rem Test for end of game 1660 if H1 = 0 then goto 2190 1670 if N1 = 64 then goto 2190 1680 rem Human's Move 1690 T1 = H 1700 T2 = C 1710 print "Your move == (Row, Col) "; 1720 input I 1725 input x$ 1730 if I < 0 then goto 1720 1740 if I > 8 then goto 1720 1750 if I <> 0 then goto 1820 1760 print "Are you forfeiting your turn (Y or N) " 1770 input x$ 1780 if x$ <> "Y" then goto 1710 1790 if Z =1 then goto 2190 1800 Z = 1
1810 goto 1000 1820 for J = 1 to 8 1830    if C$(J) = x$ then goto 1870 1840 next J 1850 goto 1720 1860 rem Check if blank 1870 if A(I,J) = 0 then goto 1910 1880 print "Sorry, that square is occupied; Try Again" 1890 goto 1720 1900 rem Check for legal neighbor 1910 gosub 2620 1920 if F1 = 1 then goto 1970 1930 print "Sorry, you are not next to one of my pieces;" 1940 print " Try Again" 1950 goto 1720 1960 rem Check of legal run 1970 U = -1 1980 gosub 2820 1990 if S1 > 0 then goto 2030 2000 print "Sorry, that doesn't flank a row; Try Again" 2010 goto 1720 2020 rem Everything is legal; make human's move 2030 Z = 0 2040 print "that gives you "; 2050 print S1; 2060 print " of my pieces" 2070 U = 1 2080 gosub 2820 2090 H1 = H1 + S1 + 1 2100 C1 = C1 - S1 2110 N1 = N1 + 1 2120 rem Print out board 2130 gosub 3100 2140 rem Test for end of game 2150 if C1 = 0 then goto 2190 2160 if N1 = 64 then goto 2190 2170 goto 1000 2180 rem End of game wrapup 2190 print 2200 print "You have "; 2210 print H1; 2220 print " pieces and I have "; 2230 print C1; 2240 print " pieces -- "; 2250 if H1 = C1 then goto 2290 2260 if H1 > C1 then gogo 2310 2270 print "Sorry, I won that one." 2280 goto 2320 2290 print "A Tie !!" 2300 goto 2500 3210 print "You Won !" 2320 C1 = C1 -H1 2330 if C1 > 0 then goto 2350 2340 C1 = -C1 2350 C1 = (64 * C1) / N1 2360 print "That was a ";
2370 if C1 < 11 then goto 2490 2380 if C1 < 25 then goto 2470 2390 if C1 < 39 then goto 2450 2400 if C1 < 53 then goto 2430 2410 print "perfect game" 2420 goto 2500 2430 print "walkaway." 2440 gogo 2500 2450 print "fight." 2460 goto 2500 2470 print "hot game !" 2480 goto 2500 2490 print "Squeaker !!" 2500 print 2510 print "Do you want to play another game (Y or N) "; 2520 input x$ 2530 if x$ = "Y" then goto 700 2540 if x$ <> "N" then goto 2520 2550 print "Thanks for playing." 2560 stop 2570 rem 2580 rem subroutine for test-for-proper-neighbor 2590 rem assumes 2600 rem   I,J locates a black square 2610 rem   you hope to see an adjacent T2 (= -T1) 2620 for I1 = -1 to 1 2630    for J1 = -1 to 1 2640       if A(I+I1,J+J1) = T2 then goto 2710 2650    next J1 2660 next I1 2670 rem  No T2 found; failure 2680 F1 = 0 2690 return 2700 rem success 2710 F1 = 1 2720 return 2730 rem Subroutine Score-and-update 2740 rem Assumes 2750 rem   (I,J) is a tentative place for a piece T1. 2760 rem   Want runs of T2 = -T1, terminated by a T1. 2770 rem   If U is true (1), mark those runs as T1's. 2780 rem   return sum of all runs (T2's only) in S1. 2790 rem   Main program contains the following arrays: 2800 rem     I4:  0 -1 -1 -1  0  1  1  1 2810 rem     J4:  1  1  0 -1 -1 -1  0  1 2820 S1 = 0 2830 for K = 1 to 8 2840    I5 = I4(K) 2850    J5 = J4(K) 2860    I6 = I + I5 2870    J6 = J + J5 2880    S3 = 0 2890    if A(I6,J6) <> T2 then goto 3070 2900    rem  Loop through the run 2910    S3 = S3 + 1 2920    I6 = I6 + I52930    J6 = J6 + J5 2940    IF A(I6,J6) = T1 then goto 2970 2950    If A(I6,J6) = 0 then goto 3070 2960    goto 2910 2970    S1 = S1 + S3 2980    if U <> 1 then goto 3070 2990    rem update board 3000    I6 = I 3010    J6 = J 3020    for K1 = 0 to S3 3030       A(I6,J6) = T1 3040       I6 = I6 + I5 3050       J6 = J6 + J5 3060    next K1 3070 next K 3080 return 3090 rem Subroutine print-board 3100 print 3110 print "  A B C D E F G H" 3120 for I = 1 to 8 3130    print I; 3140    for J = 1 to 8 3150       print " "; 3160       print d$(a(I,J)+2); 3170    next J 3180    print 3190 next i 3200 print 3210 return